/* @flow */

import VNode, { createTextVNode } from 'core/vdom/vnode'
import { isDef, isUndef, isPrimitive } from 'shared/util'

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.

/*模板编译器试图通过在编译时静态分析模板。对于纯HTML标记，可以完全跳过规范化，因为生成的渲染函数保证返回Array<VNode>。有需要额外规范化的两种情况：
1当子元素包含组件时-因为一个功能组件可能返回数组而不是单个根。在这种情况下，只是一个简单的规范化是必要的-如果任何子元素是数组，我们将整块整平
与…有关Array.prototype.concat. 保证只有1级深因为功能组件已经规范化了它们自己的子组件。*/

// simpleNormalizeChildren ⽅法调⽤场景是 render 函数当函数是编译⽣成
export function simpleNormalizeChildren (children: any) {
  for (let i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children)
    }
  }
  return children
}

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
/*2.当子对象包含始终生成嵌套数组的构造时，
e.g. <template>、<slot>、v-for或当用户提供子级时使用手工编写的呈现函数/JSX。
在这种情况下，完全正常化需要迎合所有可能类型的子级价值观。*/
export function normalizeChildren (children: any): ?Array<VNode> {
  return isPrimitive(children)
    ? [createTextVNode(children)]
    : Array.isArray(children)
      ? normalizeArrayChildren(children)
      : undefined
}

/*normalizeChildren ⽅法的调⽤场景有 2 种， ⼀个场景是 render 函数是⽤户⼿写的， 当
children 只有⼀个节点的时候， Vue.js 从接⼝层⾯允许⽤户把 children 写成基础类型⽤来创建单
个简单的⽂本节点， 这种情况会调⽤ createTextVNode 创建⼀个⽂本节点的 VNode； 另⼀个场景是
当编译 slot 、 v-for 的时候会产⽣嵌套数组的情况， 会调⽤ normalizeArrayChildren ⽅法*/

/**normalizeArrayChildren 接收 2 个参数， children 表⽰要规范的⼦节点， nestedIndex 表⽰
嵌套的索引， 因为单个 child 可能是⼀个数组类型 */

/**normalizeArrayChildren 主要的逻辑就是
遍历 children ， 获得单个节点 c ， 然后对 c 的类型判断， 如果是⼀个数组类型， 则递归调⽤
normalizeArrayChildren ; 如果是基础类型， 则通过 createTextVNode ⽅法转换成 VNode 类型；
否则就已经是 VNode 类型了， 如果 children 是⼀个列表并且列表还存在嵌套的情况， 则根据
nestedIndex 去更新它的 key。 这⾥需要注意⼀点， 在遍历的过程中， 对这 3 种情况都做了如下处
理： 如果存在两个连续的 text 节点， 会把它们合并成⼀个 text 节点。 */
function normalizeArrayChildren (children: any, nestedIndex?: string): Array<VNode> {
  const res = []
  let i, c, last
  for (i = 0; i < children.length; i++) {
    c = children[i]
    if (isUndef(c) || typeof c === 'boolean') continue
    last = res[res.length - 1]
    //  nested
    if (Array.isArray(c)) {
      res.push.apply(res, normalizeArrayChildren(c, `${nestedIndex || ''}_${i}`))
    } else if (isPrimitive(c)) {
      if (isDef(last) && isDef(last.text)) {
        last.text += String(c)
      } else if (c !== '') {
        // convert primitive to vnode
        // 转换成 VNode 类型
        res.push(createTextVNode(c))
      }
    } else {
      if (isDef(c.text) && isDef(last) && isDef(last.text)) {
        res[res.length - 1] = createTextVNode(last.text + c.text)
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isDef(c.tag) && isUndef(c.key) && isDef(nestedIndex)) {
          c.key = `__vlist${nestedIndex}_${i}__`
        }
        res.push(c)
      }
    }
  }
  return res
}
